import React, { useState, useEffect } from "react";
import axios from "axios";
import { toast } from "react-toastify";

function ManageTools() {
  const [tools, setTools] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const toolsPerPage = 5;
  const [deleteModalOpen, setDeleteModalOpen] = useState(false);
  const [editModalOpen, setEditModalOpen] = useState(false);
  const [toolToDelete, setToolToDelete] = useState(null);
  const [toolToEdit, setToolToEdit] = useState(null);

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  useEffect(() => {
    const fetchTools = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/equipment/equipment/");
        setTools(response.data.equipment);
      } catch (error) {
        toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå");
      }
    };
    fetchTools();
  }, []);

  // ‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  const deleteTool = async (equipmentId) => {
    try {
      // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ DELETE ‡πÑ‡∏õ‡∏ó‡∏µ‡πà backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ equipmentId ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
      await axios.delete(`http://localhost:5000/api/equipment/equipment/${equipmentId}`);
  
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡πÇ‡∏î‡∏¢‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      setTools((prevTools) => prevTools.filter(tool => tool.equipment_id !== equipmentId));
  
      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      toast.success("‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  
      // ‡∏õ‡∏¥‡∏î modal ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
      setDeleteModalOpen(false);
    } catch (error) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      console.error(error);
      toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå");
    }
  };
  

  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (update equipment_name ‡πÅ‡∏•‡∏∞ description)
  const updateTool = async (e) => {
    e.preventDefault();
    try {
      const updatedData = {
        equipment_name: e.target.equipment_name.value,
        description: e.target.description.value,
      };

      await axios.put(
        `http://localhost:5000/api/equipment/equipment/${toolToEdit.equipment_id}`,
        updatedData
      );
      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      const updatedTool = { ...toolToEdit, ...updatedData };
      setTools((prevTools) =>
        prevTools.map((tool) =>
          tool.equipment_id === toolToEdit.equipment_id ? updatedTool : tool
        )
      );
      toast.success("‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      setEditModalOpen(false);
      setToolToEdit(null);
    } catch (error) {
      toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå");
    }
  };

  // Toggle ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å endpoint updateEquipmentStatus
  const toggleToolStatus = async (tool) => {
    const newStatus = tool.status === "Available" ? "Unavailable" : "Available";
    try {
      await axios.put(
        `http://localhost:5000/api/equipment/equipment/${tool.equipment_id}/status`,
        { status: newStatus }
      );
      setTools((prevTools) =>
        prevTools.map((t) =>
          t.equipment_id === tool.equipment_id ? { ...t, status: newStatus } : t
        )
      );
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
      const thaiStatus = newStatus === "Available" ? "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" : "‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô";
      if (newStatus === "Available") {
        toast.success(`‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô ${thaiStatus}`);
      } else {
        toast.warn(`‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô ${thaiStatus}`);
      }
    } catch (error) {
      toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ");
    }
  };
  


  const openDeleteModal = (tool) => {
    setToolToDelete(tool);
    setDeleteModalOpen(true);
  };

  const closeDeleteModal = () => {
    setDeleteModalOpen(false);
    setToolToDelete(null);
  };

  const openEditModal = (tool) => {
    setToolToEdit(tool);
    setEditModalOpen(true);
  };

  const closeEditModal = () => {
    setEditModalOpen(false);
    setToolToEdit(null);
  };

  const currentTools = tools.slice((currentPage - 1) * toolsPerPage, currentPage * toolsPerPage);
  const totalPages = Math.ceil(tools.length / toolsPerPage);

  return (
    <div className="min-h-screen container mx-auto py-8">
      <div className="lg:pl-72">
        <div className="flex justify-between items-center mb-8">
            <div>
              <h1 className="text-2xl font-bold text-gray-800">üß∞ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</h1>
              <p className="text-sm text-gray-500 mt-1">
                ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
              </p>
            </div>
           
          </div>
        {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
        <div className="overflow-x-auto shadow-md rounded-lg bg-white">
          <table className="table w-full">
            <thead>
              <tr className="text-sm font-semibold text-gray-700 text-center">
                <th>‡∏£‡∏´‡∏±‡∏™</th>
                <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
                <th>‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà</th>
                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th>‡∏£‡∏π‡∏õ</th>
                <th>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</th>
                <th>‡∏•‡∏ö</th>
              </tr>
            </thead>
            <tbody>
              {currentTools.length ? (
                currentTools.map((tool) => (
                  <tr key={tool.equipment_id} className="hover:bg-gray-100 transition-colors duration-300">
                    <td className="py-4 px-2 text-center">{tool.equipment_id}</td>
                    <td className="py-4 px-2 text-center">{tool.equipment_name}</td>
                    <td className="py-4 px-2 text-center">{tool.description}</td>
                    <td className="py-4 px-2 text-center">{tool.quantity}</td>
                    <td className="py-4 px-2 text-center">
                    <div
  className={`tooltip  ${tool.status === "Available" ? "tooltip-success" : "tooltip-warning"}`}
  data-tip={tool.status === "Available" ? "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" : "‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"}
>
  <input
    type="checkbox"
    className={`toggle ${tool.status === "Available" ? "toggle-success" : "toggle-warning"}`}
    checked={tool.status === "Available"}
    onChange={() => toggleToolStatus(tool)}
  />
</div>

</td>

                    <td className="py-4 px-2 flex justify-center">
                      <img 
                        src={`http://localhost:5000/uploads/${tool.image}`} 
                        alt={tool.equipment_name} 
                        className="w-16 h-16 rounded-lg object-cover border" 
                      />
                    </td>
                    <td className="py-4 px-2 text-center">
                      <button onClick={() => openEditModal(tool)} className="btn btn-info btn-sm">
                        ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                      </button>
                    </td>
                    <td className="py-4 px-2 text-center">
                      <button onClick={() => openDeleteModal(tool)} className="btn btn-error btn-sm">
                        ‡∏•‡∏ö
                      </button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="8" className="text-center py-4 text-lg text-gray-500">
                    ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        <div className="mt-6 flex justify-center">
          <button
            onClick={() => setCurrentPage(1)}
            disabled={currentPage === 1}
            className="btn btn-sm btn-outline px-4 mx-1"
          >
            ¬´
          </button>
          {Array.from({ length: totalPages }, (_, i) => (
            <button
              key={i}
              onClick={() => setCurrentPage(i + 1)}
              className={`btn btn-sm ${currentPage === i + 1 ? "btn-primary" : "btn-outline"} px-4 mx-1`}
            >
              {i + 1}
            </button>
          ))}
          <button
            onClick={() => setCurrentPage(totalPages)}
            disabled={currentPage === totalPages}
            className="btn btn-sm btn-outline px-4 mx-1"
          >
            ¬ª
          </button>
        </div>

        {/* Delete Confirmation Modal */}
        {deleteModalOpen && (
          <div className="modal modal-open">
            <div className="modal-box">
              <h3 className="font-bold text-lg mb-4">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö</h3>
              <p>
                ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå{" "}
                <span className="font-semibold">{toolToDelete?.equipment_name}</span>{" "}
                ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
              </p>
              <div className="modal-action">
                <button onClick={closeDeleteModal} className="btn btn-outline">
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
                <button
                  onClick={() => deleteTool(toolToDelete?.equipment_id)}
                  className="btn btn-error"
                >
                  ‡∏•‡∏ö
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Edit Modal */}
        {editModalOpen && (
          <div className="modal modal-open">
            <div className="modal-box">
              <h3 className="font-bold text-lg mb-4">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</h3>
              <form onSubmit={updateTool}>
                <div className="form-control mb-4">
                  <label className="label">
                    <span className="label-text font-semibold">‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</span>
                  </label>
                  <input
                    type="text"
                    name="equipment_name"
                    defaultValue={toolToEdit?.equipment_name}
                    className="input input-bordered w-full"
                    required
                  />
                </div>
                <div className="form-control mb-4">
                  <label className="label">
                    <span className="label-text font-semibold">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</span>
                  </label>
                  <input
                    type="text"
                    name="description"
                    defaultValue={toolToEdit?.description}
                    className="input input-bordered w-full"
                    required
                  />
                </div>
                <div className="modal-action">
                  <button onClick={closeEditModal} type="button" className="btn btn-outline">
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </button>
                  <button type="submit" className="btn btn-primary">
                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default ManageTools;
