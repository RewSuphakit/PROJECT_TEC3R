// =========================
// 7. ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (History)
// =========================
exports.getHistoryByUserId = async (req, res) => {
  const { user_id } = req.params;
  if (!user_id) return res.status(400).json({ message: "user_id is required" });

  try {
    const query = `
      SELECT br.record_id, e.equipment_name, br.quantity_borrow, br.borrow_date, br.return_date, br.status
      FROM borrow_records br
      JOIN equipment e ON br.equipment_id = e.equipment_id
      WHERE br.user_id = ?
      ORDER BY br.borrow_date DESC
    `;
    const [results] = await connection.promise().query(query, [user_id]);

    // Format date to Thai locale
    const formattedResults = results.map(record => ({
      ...record,
      borrow_date: record.borrow_date ? new Date(record.borrow_date).toLocaleString("th-TH", {
        timeZone: "Asia/Bangkok",
        year: "numeric",
        month: "2-digit",
        day: "2-digit"
      }) : null,
      return_date: record.return_date ? new Date(record.return_date).toLocaleString("th-TH", {
        timeZone: "Asia/Bangkok",
        year: "numeric",
        month: "2-digit",
        day: "2-digit"
      }) : null,
    }));

    res.status(200).json({ history: formattedResults });
  } catch (error) {
    console.error("Error fetching history:", error);
    res.status(500).json({ message: "Internal server error", error: error.message });
  }
};
const connection = require('../config/db');
const lineNotify = require('../utils/lineNotify');

// =========================
// 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° (Add Borrow Record)
// =========================
exports.addBorrowRecord = async (req, res) => {
  const { user_id, items } = req.body; // items: array ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°
  if (!user_id || !Array.isArray(items) || items.length === 0) {
    return res.status(400).json({ message: "Missing or invalid required fields" });
  }

  try {
    // ‡πÄ‡∏£‡∏¥‡πà‡∏° Transaction
    await connection.promise().beginTransaction();

    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á transaction ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô table borrow_transactions
    const insertTransactionQuery = `INSERT INTO borrow_transactions (user_id) VALUES (?)`;
    const [transactionResult] = await connection.promise().query(insertTransactionQuery, [user_id]);
    const transaction_id = transactionResult.insertId;

    // 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô borrow_records ‡∏î‡πâ‡∏ß‡∏¢ batch insert
    const insertRecordQuery = `
      INSERT INTO borrow_records (transaction_id, user_id, equipment_id, quantity_borrow)
      VALUES ?
    `;
    const borrowData = items.map(({ equipment_id, quantity_borrow }) => [
      transaction_id,
      user_id,
      equipment_id,
      quantity_borrow,
    ]);
    await connection.promise().query(insertRecordQuery, [borrowData]);

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á equipment
    const checkEquipmentQuery = `SELECT quantity FROM equipment WHERE equipment_id = ?`;
    const updateEquipmentQuery = `
      UPDATE equipment
      SET quantity = quantity - ?
      WHERE equipment_id = ? AND quantity >= ?
    `;
    for (const { equipment_id, quantity_borrow } of items) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const [equipmentResult] = await connection.promise().query(checkEquipmentQuery, [equipment_id]);
      if (equipmentResult.length === 0) {
        throw new Error(`Equipment with id ${equipment_id} not found`);
      }
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (equipmentResult[0].quantity < quantity_borrow) {
        throw new Error(`Insufficient quantity for equipment id ${equipment_id}`);
      }
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
      const [updateResult] = await connection.promise().query(updateEquipmentQuery, [
        quantity_borrow,
        equipment_id,
        quantity_borrow,
      ]);
      if (updateResult.affectedRows === 0) {
        throw new Error(`Failed to update equipment id ${equipment_id}`);
      }
    }

    // 4. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const selectUserQuery = `
      SELECT u.student_name, u.student_id, u.phone, bt.borrow_date
      FROM users u
      JOIN borrow_transactions bt ON u.user_id = bt.user_id
      WHERE bt.transaction_id = ?
    `;
    const [userResult] = await connection.promise().query(selectUserQuery, [transaction_id]);
    if (userResult.length === 0) throw new Error("User not found");

    const selectRecordsQuery = `
      SELECT br.record_id, br.quantity_borrow, e.equipment_name
      FROM borrow_records br
      JOIN equipment e ON br.equipment_id = e.equipment_id
      WHERE br.transaction_id = ?
    `;
    const [recordsResult] = await connection.promise().query(selectRecordsQuery, [transaction_id]);
    if (recordsResult.length === 0) throw new Error("Borrow records not found");

    // 5. ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö response
    const responseData = {
      transaction_id,
      borrow_date: userResult[0].borrow_date,
      return_date: null,
      user_id,
      student_name: userResult[0].student_name,
      borrow_records: recordsResult.map(record => ({
        record_id: record.record_id,
        quantity_borrow: record.quantity_borrow,
        equipment_name: record.equipment_name,
        status: "Borrowed",
        image_return: "",
      })),
    };

    // 6. ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
    const { student_name, student_id, phone, borrow_date } = userResult[0];
    const thaiTimeCustom = new Date(borrow_date).toLocaleString("th-TH", {
      timeZone: "Asia/Bangkok",
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
    });

    // 7. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE
    let message = `üìå ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà:\n`;
    message += `- üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°: ${student_name}\n`;
    message += `- üéì ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${student_id}\n`;
    message += `- üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${phone}\n`;
    message += `- üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°: ${thaiTimeCustom}\n`;
    recordsResult.forEach(record => {
      message += `- üß∞ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ${record.equipment_name} (${record.quantity_borrow} ‡∏ä‡∏¥‡πâ‡∏ô)\n`;
    });

    // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE
    await lineNotify.sendMessage(message);

    // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Transaction
    await connection.promise().commit();
    res.status(201).json(responseData);
  } catch (error) {
    await connection.promise().rollback();
    console.error("Error adding borrow record:", error);
    res.status(500).json({ message: "Error adding borrow record", error: error.message });
  }
};

// =========================
// 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (Update Return Status)
// =========================
exports.updateReturnStatus = async (req, res) => {
  const { record_id } = req.params;
  const { status } = req.body;
  const image_return = req.file?.filename || "";

  if (!record_id) {
    return res.status(400).json({ message: "Missing required record_id" });
  }

  try {
    await connection.promise().beginTransaction();

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const [records] = await connection.promise().query(
      `SELECT equipment_id, quantity_borrow FROM borrow_records WHERE record_id = ?`,
      [record_id]
    );
    if (!records.length) throw new Error("Borrow record not found");
    const { equipment_id, quantity_borrow } = records[0];

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ status ‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 'Returned')
    const updateBorrowQuery = `
      UPDATE borrow_records
      SET return_date = ?, status = ?, image_return = ?
      WHERE record_id = ?
    `;
    const updatedStatus = status ? status : "Returned";
    const [updateResult] = await connection.promise().query(updateBorrowQuery, [
      new Date(),
      updatedStatus,
      image_return,
      record_id,
    ]);
    if (updateResult.affectedRows === 0) throw new Error("Failed to update borrow record");

    // ‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á equipment
    const restoreQuery = `
      UPDATE equipment
      SET quantity = quantity + ?
      WHERE equipment_id = ?
    `;
    await connection.promise().query(restoreQuery, [quantity_borrow, equipment_id]);

    await connection.promise().commit();

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE
    const selectReturnQuery = `
      SELECT u.student_name, u.phone, e.equipment_name, br.return_date, br.status, br.quantity_borrow
      FROM borrow_records br
      JOIN users u ON br.user_id = u.user_id
      JOIN equipment e ON br.equipment_id = e.equipment_id
      WHERE br.record_id = ?
    `;
    const [userResult] = await connection.promise().query(selectReturnQuery, [record_id]);
    if (!userResult.length) throw new Error("Return record not found after update");
    const { student_name, phone, equipment_name, return_date, status: borrow_status } = userResult[0];
    const thai_return_date = new Date(return_date).toLocaleString("th-TH", {
      timeZone: "Asia/Bangkok",
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
    });

    const message = `üìå ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:
- üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô: ${student_name}
- üéí ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ${equipment_name}
- üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${phone}
- üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô: ${thai_return_date}
- üîÑ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô: ${quantity_borrow} ‡∏ä‡∏¥‡πâ‡∏ô
- ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${borrow_status}`;

    // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏ö URL (‡∏õ‡∏£‡∏±‡∏ö URL ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    const imageUrl = image_return ? `https://yourdomain.com/image_return/${image_return}` : null;
    try {
      await lineNotify.sendMessage(message, imageUrl);
    } catch (lineError) {
      console.error("Error sending LINE notification:", lineError);
    }

    res.status(200).json({ message: "Return status updated successfully" });
  } catch (error) {
    await connection.promise().rollback();
    console.error("Error updating return status:", error);
    res.status(500).json({ message: "Error updating return status", error: error.message });
  }
};

exports.getAllBorrowRecords = async (req, res) => {
  try {
    const query = `
      SELECT 
        bt.transaction_id, 
        bt.borrow_date, 
        bt.user_id, 
        u.student_name,
        br.record_id, 
        br.return_date, 
        br.quantity_borrow, 
        e.equipment_name, 
        br.status, 
        br.image_return
      FROM borrow_transactions bt
      JOIN users u ON bt.user_id = u.user_id
      JOIN borrow_records br ON bt.transaction_id = br.transaction_id
      JOIN equipment e ON br.equipment_id = e.equipment_id
      ORDER BY bt.transaction_id DESC
    `;
    const [rows] = await connection.promise().query(query);

    // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö transaction ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÇ‡∏î‡∏¢‡∏°‡∏µ borrow_records ‡πÄ‡∏õ‡πá‡∏ô Array
    const transactionsMap = {};
    rows.forEach(row => {
      if (!transactionsMap[row.transaction_id]) {
        transactionsMap[row.transaction_id] = {
          transaction_id: row.transaction_id,
          borrow_date: row.borrow_date,
          return_date: row.return_date,
          user_id: row.user_id,
          student_name: row.student_name,
          borrow_records: [],
        };
      }
      transactionsMap[row.transaction_id].borrow_records.push({
        record_id: row.record_id,
        quantity_borrow: row.quantity_borrow,
        equipment_name: row.equipment_name,
        status: row.status,
        image_return: row.image_return,
      });
    });

    const borrowTransactions = Object.values(transactionsMap);
    res.json({ borrow_transactions: borrowTransactions });
  } catch (error) {
    console.error("Error fetching borrow records:", error);
    res.status(500).json({ message: "Error fetching borrow records", error: error.message });
  }
};

// =========================
// 4. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° user_id (Get Borrow Records By User ID)
// =========================
exports.getAllBorrowRecordsByUserId = async (req, res) => {
  const { user_id } = req.params;
  if (!user_id) {
    return res.status(400).json({ message: "User ID is required" });
  }

  try {
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 'Borrowed'
    const countQuery = `
      SELECT COUNT(CASE WHEN status = 'Borrowed' THEN 1 END) AS borrowed_count
      FROM borrow_records
      WHERE user_id = ? AND status = 'Borrowed' 
    `;
    const [countResults] = await connection.promise().query(countQuery, [user_id]);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
    const borrowQuery = `
      SELECT 
        e.equipment_id,
        e.image,
        e.equipment_name,
        br.borrow_date,
        br.status,
        br.quantity_borrow,
        br.record_id
      FROM borrow_records br
      JOIN users u ON br.user_id = u.user_id
      JOIN equipment e ON br.equipment_id = e.equipment_id
      WHERE br.user_id = ?
      ORDER BY br.borrow_date DESC
    `;
    const [borrowResults] = await connection.promise().query(borrowQuery, [user_id]);

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
    const formattedBorrowResults = borrowResults.map(record => {
      const formattedDate = new Date(record.borrow_date).toLocaleString("th-TH", {
        timeZone: "Asia/Bangkok",
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
      });
      return { ...record, borrow_date: formattedDate };
    });

    res.status(200).json({
      message: formattedBorrowResults.length > 0 ? "Borrow records fetched successfully" : "No borrow records found for this user",
      data: {
        borrowed_count: countResults[0]?.borrowed_count || 0,
        borrow_records: formattedBorrowResults,
      },
    });
  } catch (error) {
    console.error("Error fetching borrow records by user:", error);
    res.status(500).json({ message: "An error occurred while fetching borrow records", error: error.message });
  }
};

// =========================
// 5. ‡∏•‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° (Delete Borrow Record)
// =========================
exports.deleteBorrowRecord = async (req, res) => {
  const { record_id } = req.params;
  if (!record_id) {
    return res.status(400).json({ message: "Missing required record_id" });
  }

  try {
    await connection.promise().beginTransaction();

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• borrow record ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
    const [records] = await connection.promise().query(
      `SELECT equipment_id, quantity_borrow FROM borrow_records WHERE record_id = ?`,
      [record_id]
    );
    if (!records.length) throw new Error("Borrow record not found");
    const { equipment_id, quantity_borrow } = records[0];

    // ‡∏•‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
    const deleteQuery = `DELETE FROM borrow_records WHERE record_id = ?`;
    const [deleteResult] = await connection.promise().query(deleteQuery, [record_id]);
    if (deleteResult.affectedRows === 0) throw new Error("Failed to delete borrow record");

    // ‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á equipment
    const updateQuery = `
      UPDATE equipment
      SET quantity = quantity + ?
      WHERE equipment_id = ?
    `;
    await connection.promise().query(updateQuery, [quantity_borrow, equipment_id]);

    await connection.promise().commit();
    res.status(200).json({ message: "Borrow record deleted successfully" });
  } catch (error) {
    console.error("Error deleting borrow record:", error);
    await connection.promise().rollback();
    res.status(500).json({ message: "Error deleting borrow record", error: error.message });
  }
};

// =========================
// 6. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ï‡∏≤‡∏° record_id (Get Borrow Record by ID)
// =========================
exports.getAllBorrowRecordsID = async (req, res) => {
  const { record_id } = req.params;
  if (!record_id) return res.status(400).json({ message: "ID is required" });

  try {
    const query = `
      SELECT br.record_id, u.student_id, u.student_name, u.student_email, 
             e.equipment_name,  br.borrow_date, br.return_date, 
             br.status, br.quantity_borrow, br.image_return
      FROM borrow_records br
      JOIN users u ON br.user_id = u.user_id
      JOIN equipment e ON br.equipment_id = e.equipment_id
      WHERE br.record_id = ?
    `;
    const [borrowResults] = await connection.promise().query(query, [record_id]);
    if (!borrowResults.length) {
      return res.status(404).json({ message: "No borrow records found" });
    }

    const borrowed_count = borrowResults.reduce(
      (total, record) => total + (record.quantity_borrow || 0),
      0
    );

    const formattedResults = borrowResults.map(record => ({
      ...record,
      borrow_date: new Date(record.borrow_date).toLocaleString("th-TH", {
        timeZone: "Asia/Bangkok",
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
      }),
    }));

    res.status(200).json({
      borrowed_count,
      borrow_records: formattedResults,
    });
  } catch (error) {
    console.error("Error fetching borrow record by ID:", error);
    res.status(500).json({ message: "Internal server error", error: error.message });
  }
};
